[buildout]
extends = http://dist.plone.org/release/5-latest/versions.cfg
show-picked-versions = true
extensions =
  mr.developer

parts =
  instance
  test
  i18ndude
  resources
  code-analysis
  zptlint
  coverage
  coverage-report
  releaser
  git-hooks

develop = .


[instance]
recipe = plone.recipe.zope2instance
user = admin:admin
http-address = 8080
eggs =
  Plone
  Pillow
  collective.permalink [test]


[test]
recipe = zc.recipe.testrunner
eggs = ${instance:eggs}
environment = test-env
defaults = ['-s', 'collective.permalink', '--auto-color', '--auto-progress']


[test-env]
zope_i18n_compile_mo_files = true


[i18ndude]
recipe = zc.recipe.egg
eggs = i18ndude


[resources]
recipe = zc.recipe.egg
eggs = Products.CMFPlone
scripts = plone-compile-resources


[coverage]
recipe = zc.recipe.egg
eggs = coverage
initialization =
  include = '--source=${buildout:directory}/collective'
  sys.argv = sys.argv[:] + ['run', include, 'bin/test', '--all']


[coverage-report]
recipe = zc.recipe.egg
eggs = coverage
scripts = coverage=report
initialization =
  sys.argv = sys.argv[:] + ['html', '-i']


[code-analysis]
recipe = plone.recipe.codeanalysis
directory = ${buildout:directory}/collective/permalink
multiprocessing = True
pre-commit-hook = True
# flake
flake8 = True
flake8-extensions =
  flake8-blind-except
  flake8-coding
  flake8-commas
  flake8-debugger
  flake8-deprecated
  flake8-isort
  flake8-pep3101
  flake8-plone-api
  flake8-plone-hasattr
  flake8-print
  flake8-quotes
  flake8-strict
  flake8-string-format
  flake8-todo
  pep8-naming
flake8-max-line-length = 80
flake8-max-complexity = 15
flake8-exclude = bootstrap.py,bootstrap-buildout.py,docs,*.egg.,omelette
deprecated-aliases = True
# i18n
i18ndude-bin = ${buildout:bin-directory}/i18ndude
find-untranslated = True
# zpt
zptlint = True
zptlint-bin = ${buildout:bin-directory}/zptlint


[zptlint]
recipe = zc.recipe.egg
eggs = zptlint


[releaser]
recipe = zc.recipe.egg
eggs = zest.releaser


[git-hooks]
recipe = collective.recipe.cmd
on_install = True
on_update = True
cmds =
  export PRECOMMIT=.git/hooks/pre-commit
  export PREPUSH=.git/hooks/pre-push
  export STR="\nif [ \`git rev-parse --abbrev-ref HEAD\` == "deployment" ]; then\n    if ! bin/prerelease; then\n        echo 'ERROR: Return to master branch!'\n        git checkout master\n    fi\nfi"
  grep -q "deployment" "$PRECOMMIT" || echo "$STR" >> "$PRECOMMIT"


[versions]
# Don't use a released version of collective.permalink
collective.permalink =

setuptools =
zc.buildout =
docutils =
plone.testing = 5.1
